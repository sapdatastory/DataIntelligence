{
	"properties": {},
	"description": "test - 100 Train",
	"processes": {
		"python3operator1": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "Python3",
				"x": 285,
				"y": 130.99999976158142,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"metadata": {},
					"script": "# Example Python script to perform training on input data & generate Metrics & Model Blob\ndef on_input(data):\n    \n    # Obtain data\n    import sqlanydb\n    import pandas as pd\n    import io\n    \n    conn = sqlanydb.connect(uid='userid', pwd='userpw', \n                            host='xxxxx.iq.hdl.prod-ap12.hanacloud.ondemand.com:443', \n                            ENC='TLS(tls_type=rsa;direct=yes)')\n    cursor = conn.cursor()\n    \n    sql = \"SELECT * FROM RUNNINGTIMES\"\n    cursor.execute(sql)\n    \n    rowset = cursor.fetchall()\n    \n    df_data = pd.DataFrame(rowset)\n    df_data.columns = ['ID', 'HALFMARATHON_MINUTES', 'MARATHON_MINUTES']\n    \n    cursor.close()\n    conn.close()\n\n    #df_data = pd.read_csv(io.StringIO(data), sep=\";\")\n\n    # Get predictor and target\n    x = df_data[[\"HALFMARATHON_MINUTES\"]]\n    y_true = df_data[\"MARATHON_MINUTES\"]\n    \n    # Train regression\n    from sklearn.linear_model import LinearRegression\n    lm = LinearRegression()\n    lm.fit(x, y_true)\n    \n    # Model quality\n    import numpy as np\n    y_pred = lm.predict(x)\n    mse = np.mean((y_pred - y_true)**2)\n    rmse = np.sqrt(mse)\n    rmse = round(rmse, 2)\n    \n    # to send metrics to the Submit Metrics operator, create a Python dictionary of key-value pairs\n    metrics_dict = {\"RMSE\": str(rmse), \"n\": str(len(df_data))}\n    \n    # send the metrics to the output port - Submit Metrics operator will use this to persist the metrics \n    api.send(\"metrics\", api.Message(metrics_dict))\n\n    # create & send the model blob to the output port - Artifact Producer operator will use this to persist the model and create an artifact ID\n    import pickle\n    model_blob = pickle.dumps(lm)\n    api.send(\"modelBlob\", model_blob)\n    \napi.set_port_callback(\"input\", on_input)\n"
				},
				"additionalinports": [
					{
						"name": "input",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "metrics",
						"type": "message"
					},
					{
						"name": "modelBlob",
						"type": "blob"
					}
				]
			}
		},
		"submitmetrics1": {
			"component": "com.sap.ml.submitMetrics",
			"metadata": {
				"label": "Submit Metrics",
				"x": 485.9999990463257,
				"y": 12,
				"height": 80,
				"width": 120,
				"extensible": false,
				"config": {}
			}
		},
		"graphterminator1": {
			"component": "com.sap.util.graphTerminator",
			"metadata": {
				"label": "Graph Terminator",
				"x": 1171.9999961853027,
				"y": 130.99999976158142,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"python3operator2": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "Operators Complete",
				"x": 1002.9999961853027,
				"y": 130.99999976158142,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"script": "# When both input ports signals arive, the Artifact Producer & Submit Metrics have completed - safe to terminate the graph.\n\ndef on_inputs_ready(metrics_resp, artifact_id):\n    # both input ports have data - previous operators have completed. Send a message as output to stop the graph\n    api.send(\"output\", api.Message(\"Operators complete.\"))\n\napi.set_port_callback([\"metricsResponse\", \"artifactId\"], on_inputs_ready)\n\n"
				},
				"additionalinports": [
					{
						"name": "metricsResponse",
						"type": "message"
					},
					{
						"name": "artifactId",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "output",
						"type": "message"
					}
				]
			}
		},
		"tomessageconverter1": {
			"component": "com.sap.util.toMessageConverter",
			"metadata": {
				"label": "ToMessage Converter",
				"x": 520.4999990463257,
				"y": 132,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"artifactproducer1": {
			"component": "com.sap.ml.artifact.producer.v2",
			"metadata": {
				"label": "Artifact Producer",
				"x": 686.9999980926514,
				"y": 131.49999976158142,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"artifactKind": "model",
					"artifactName": "${newArtifactName}"
				}
			}
		},
		"tostringconverter3": {
			"component": "com.sap.util.toStringConverter",
			"metadata": {
				"label": "ToString Converter",
				"x": 887.999997138977,
				"y": 160.49999952316284,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"writefile1": {
			"component": "com.sap.file.write",
			"metadata": {
				"label": "Write File",
				"x": 485.9999990463257,
				"y": 222,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"constantgenerator1": {
			"component": "com.sap.util.constantGenerator",
			"metadata": {
				"label": "Constant Generator",
				"x": 116,
				"y": 131,
				"height": 80,
				"width": 120,
				"extensible": true,
				"generation": 1,
				"config": {}
			}
		}
	},
	"groups": [
		{
			"name": "group1",
			"nodes": [
				"python3operator1"
			],
			"metadata": {
				"description": "Group"
			},
			"tags": {
				"z_iq_opensuse": "16.1"
			}
		}
	],
	"connections": [
		{
			"metadata": {
				"points": "409,161.99999976158142 436.99999952316284,161.99999976158142 436.99999952316284,52 480.9999990463257,52"
			},
			"src": {
				"port": "metrics",
				"process": "python3operator1"
			},
			"tgt": {
				"port": "metrics",
				"process": "submitmetrics1"
			}
		},
		{
			"metadata": {
				"points": "609.9999990463257,52 637.9999985694885,52 637.9999985694885,102.50000023841858 838.9999976158142,102.50000023841858 838.9999976158142,131.5 969.9999966621399,131.5 969.9999966621399,161.99999976158142 997.9999961853027,161.99999976158142"
			},
			"src": {
				"port": "response",
				"process": "submitmetrics1"
			},
			"tgt": {
				"port": "metricsResponse",
				"process": "python3operator2"
			}
		},
		{
			"metadata": {
				"points": "1126.9999961853027,170.99999976158142 1166.9999961853027,170.99999976158142"
			},
			"src": {
				"port": "output",
				"process": "python3operator2"
			},
			"tgt": {
				"port": "stop",
				"process": "graphterminator1"
			}
		},
		{
			"metadata": {
				"points": "810.9999980926514,153.49999976158142 854.9999976158142,153.49999976158142 854.9999976158142,194.49999952316284 882.999997138977,194.49999952316284"
			},
			"src": {
				"port": "outArtifact",
				"process": "artifactproducer1"
			},
			"tgt": {
				"port": "inmessage",
				"process": "tostringconverter3"
			}
		},
		{
			"metadata": {
				"points": "941.999997138977,185.49999952316284 969.9999966621399,185.49999952316284 969.9999966621399,179.99999976158142 997.9999961853027,179.99999976158142"
			},
			"src": {
				"port": "outstring",
				"process": "tostringconverter3"
			},
			"tgt": {
				"port": "artifactId",
				"process": "python3operator2"
			}
		},
		{
			"metadata": {
				"points": "810.9999980926514,189.49999976158142 838.9999976158142,189.49999976158142 838.9999976158142,239.49999928474426 653.9999985694885,239.49999928474426 653.9999985694885,329.99999952316284 452.99999952316284,329.99999952316284 452.99999952316284,262 480.9999990463257,262"
			},
			"src": {
				"port": "outFileSend",
				"process": "artifactproducer1"
			},
			"tgt": {
				"port": "file",
				"process": "writefile1"
			}
		},
		{
			"metadata": {
				"points": "609.9999990463257,253 637.9999985694885,253 637.9999985694885,180.49999976158142 681.9999980926514,180.49999976158142"
			},
			"src": {
				"port": "file",
				"process": "writefile1"
			},
			"tgt": {
				"port": "inFileReturn",
				"process": "artifactproducer1"
			}
		},
		{
			"metadata": {
				"points": "409,179.99999976158142 452.99999952316284,179.99999976158142 452.99999952316284,148 515.4999990463257,148"
			},
			"src": {
				"port": "modelBlob",
				"process": "python3operator1"
			},
			"tgt": {
				"port": "inbody",
				"process": "tomessageconverter1"
			}
		},
		{
			"metadata": {
				"points": "574.4999990463257,157 637.9999985694885,157 637.9999985694885,162.49999976158142 681.9999980926514,162.49999976158142"
			},
			"src": {
				"port": "out",
				"process": "tomessageconverter1"
			},
			"tgt": {
				"port": "inArtifact",
				"process": "artifactproducer1"
			}
		},
		{
			"metadata": {
				"points": "240,171 280,170.99999976158142"
			},
			"src": {
				"port": "out",
				"process": "constantgenerator1"
			},
			"tgt": {
				"port": "input",
				"process": "python3operator1"
			}
		}
	],
	"inports": {},
	"outports": {},
	"metadata": {}
}
